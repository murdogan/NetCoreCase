// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetCoreCase.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NetCoreCase.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250529111025_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NetCoreCase.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f01a852-18a9-4b0c-84cc-ac12f82210e0"),
                            CreatedAt = new DateTime(2025, 5, 29, 11, 10, 25, 500, DateTimeKind.Utc).AddTicks(282),
                            Description = "Teknoloji ile ilgili içerikler",
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = new Guid("24e541c7-ee44-497e-beda-b83ab2648d39"),
                            CreatedAt = new DateTime(2025, 5, 29, 11, 10, 25, 500, DateTimeKind.Utc).AddTicks(435),
                            Description = "Sağlık ile ilgili içerikler",
                            Name = "Sağlık"
                        },
                        new
                        {
                            Id = new Guid("5c7fc0e2-d376-4b50-aeef-51a948a54ad1"),
                            CreatedAt = new DateTime(2025, 5, 29, 11, 10, 25, 500, DateTimeKind.Utc).AddTicks(436),
                            Description = "Eğitim ile ilgili içerikler",
                            Name = "Eğitim"
                        });
                });

            modelBuilder.Entity("NetCoreCase.Domain.Entities.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Language");

                    b.HasIndex("UserId");

                    b.HasIndex("Title", "Language");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("NetCoreCase.Domain.Entities.ContentVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VariantData")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("ContentId", "IsDefault");

                    b.ToTable("ContentVariants");
                });

            modelBuilder.Entity("NetCoreCase.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b82fae75-5bef-4d73-8b15-4f255764f474"),
                            CreatedAt = new DateTime(2025, 5, 29, 11, 10, 25, 500, DateTimeKind.Utc).AddTicks(4943),
                            Email = "ahmet@example.com",
                            FullName = "Ahmet Yılmaz"
                        },
                        new
                        {
                            Id = new Guid("187dfadb-2317-4ff2-9381-60b0278aa845"),
                            CreatedAt = new DateTime(2025, 5, 29, 11, 10, 25, 500, DateTimeKind.Utc).AddTicks(4947),
                            Email = "ayse@example.com",
                            FullName = "Ayşe Demir"
                        });
                });

            modelBuilder.Entity("NetCoreCase.Domain.Entities.Content", b =>
                {
                    b.HasOne("NetCoreCase.Domain.Entities.Category", "Category")
                        .WithMany("Contents")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NetCoreCase.Domain.Entities.User", "User")
                        .WithMany("Contents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetCoreCase.Domain.Entities.ContentVariant", b =>
                {
                    b.HasOne("NetCoreCase.Domain.Entities.Content", "Content")
                        .WithMany("Variants")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("NetCoreCase.Domain.Entities.Category", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("NetCoreCase.Domain.Entities.Content", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("NetCoreCase.Domain.Entities.User", b =>
                {
                    b.Navigation("Contents");
                });
#pragma warning restore 612, 618
        }
    }
}
